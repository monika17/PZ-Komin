using System;

namespace Komin
{
    public static class KominCipherSuite
    {
        public const byte InitialSeed = 0xA5;

        private static byte[] crypttab ={
            0x77, 0x95, 0x2E, 0x90, 0xDA, 0xED, 0xCC, 0x19, 0xE6, 0x0D, 0xE0, 0xC0, 0x86, 0xB6, 0x89, 0x16, 
            0xCE, 0x3D, 0x1C, 0x2D, 0x5D, 0x52, 0xD2, 0x65, 0xE3, 0x7B, 0x71, 0x83, 0xC1, 0x28, 0x03, 0xAE, 
            0xA8, 0xBA, 0xB0, 0xDF, 0x4C, 0xE7, 0x66, 0x6A, 0x88, 0xA0, 0x33, 0x54, 0x0E, 0x7A, 0x9C, 0x76, 
            0xD4, 0xE9, 0x53, 0x0B, 0x36, 0xD8, 0x8B, 0xDB, 0x24, 0x4B, 0xC5, 0xB8, 0x8A, 0x2A, 0x5E, 0xF4, 
            0x4D, 0x5F, 0x96, 0x70, 0xBC, 0x7C, 0x43, 0x08, 0xB2, 0xC3, 0x7E, 0x1A, 0x5C, 0xA7, 0xFF, 0xFE, 
            0xD1, 0xAA, 0xC4, 0x42, 0xF8, 0x92, 0xC8, 0xB5, 0x75, 0x6E, 0x98, 0x0F, 0x62, 0x34, 0xCD, 0x11, 
            0x41, 0x47, 0x51, 0x23, 0x8C, 0x9A, 0x1F, 0x35, 0xE8, 0x06, 0x44, 0x4F, 0xCB, 0x3A, 0x9F, 0x3E, 
            0xF9, 0xAC, 0xB4, 0xA5, 0x63, 0x6C, 0xB9, 0x05, 0x64, 0xD5, 0xEC, 0x17, 0x32, 0x38, 0x94, 0x91, 
            0xE4, 0x7D, 0xF7, 0xC6, 0x12, 0x6D, 0xC9, 0x57, 0x50, 0xC2, 0x00, 0x31, 0x48, 0x6B, 0x40, 0xEE, 
            0xA9, 0x18, 0xD7, 0x97, 0x01, 0x87, 0xFB, 0xC7, 0x68, 0x61, 0x73, 0x67, 0xBD, 0x0A, 0x49, 0xF1, 
            0x5A, 0x58, 0x4A, 0x29, 0xBE, 0x82, 0xF3, 0xFD, 0x2B, 0x9B, 0xBB, 0x1D, 0x3B, 0xCF, 0xAF, 0x3F, 
            0x13, 0xEF, 0xAD, 0xB1, 0x78, 0xD6, 0xB7, 0xB3, 0x45, 0xD0, 0x81, 0xE1, 0x10, 0x79, 0x30, 0x72, 
            0x37, 0x69, 0x80, 0xE2, 0x7F, 0xDE, 0x20, 0xAB, 0xA1, 0x26, 0xF0, 0xFA, 0x2C, 0x8E, 0x09, 0x9E, 
            0xD9, 0x99, 0xCA, 0x0C, 0x02, 0x85, 0x4E, 0x59, 0x8F, 0xEA, 0xDD, 0x1E, 0x27, 0x39, 0xBF, 0x93, 
            0x6F, 0xA2, 0x84, 0x04, 0xDC, 0x1B, 0xA3, 0x8D, 0x14, 0xA4, 0xD3, 0x9D, 0x15, 0x5B, 0x07, 0x2F, 
            0xA6, 0x22, 0x3C, 0xE5, 0xEB, 0x60, 0x55, 0xF5, 0x74, 0x46, 0xF6, 0x21, 0xF2, 0x25, 0x56, 0xFC
        };

        private static byte[] decrypttab ={
            0x8A, 0x94, 0xD4, 0x1E, 0xE3, 0x77, 0x69, 0xEE, 0x47, 0xCE, 0x9D, 0x33, 0xD3, 0x09, 0x2C, 0x5B, 
            0xBC, 0x5F, 0x84, 0xB0, 0xE8, 0xEC, 0x0F, 0x7B, 0x91, 0x07, 0x4B, 0xE5, 0x12, 0xAB, 0xDB, 0x66, 
            0xC6, 0xFB, 0xF1, 0x63, 0x38, 0xFD, 0xC9, 0xDC, 0x1D, 0xA3, 0x3D, 0xA8, 0xCC, 0x13, 0x02, 0xEF, 
            0xBE, 0x8B, 0x7C, 0x2A, 0x5D, 0x67, 0x34, 0xC0, 0x7D, 0xDD, 0x6D, 0xAC, 0xF2, 0x11, 0x6F, 0xAF, 
            0x8E, 0x60, 0x53, 0x46, 0x6A, 0xB8, 0xF9, 0x61, 0x8C, 0x9E, 0xA2, 0x39, 0x24, 0x40, 0xD6, 0x6B, 
            0x88, 0x62, 0x15, 0x32, 0x2B, 0xF6, 0xFE, 0x87, 0xA1, 0xD7, 0xA0, 0xED, 0x4C, 0x14, 0x3E, 0x41, 
            0xF5, 0x99, 0x5C, 0x74, 0x78, 0x17, 0x26, 0x9B, 0x98, 0xC1, 0x27, 0x8D, 0x75, 0x85, 0x59, 0xE0, 
            0x43, 0x1A, 0xBF, 0x9A, 0xF8, 0x58, 0x2F, 0x00, 0xB4, 0xBD, 0x2D, 0x19, 0x45, 0x81, 0x4A, 0xC4, 
            0xC2, 0xBA, 0xA5, 0x1B, 0xE2, 0xD5, 0x0C, 0x95, 0x28, 0x0E, 0x3C, 0x36, 0x64, 0xE7, 0xCD, 0xD8, 
            0x03, 0x7F, 0x55, 0xDF, 0x7E, 0x01, 0x42, 0x93, 0x5A, 0xD1, 0x65, 0xA9, 0x2E, 0xEB, 0xCF, 0x6E, 
            0x29, 0xC8, 0xE1, 0xE6, 0xE9, 0x73, 0xF0, 0x4D, 0x20, 0x90, 0x51, 0xC7, 0x71, 0xB2, 0x1F, 0xAE, 
            0x22, 0xB3, 0x48, 0xB7, 0x72, 0x57, 0x0D, 0xB6, 0x3B, 0x76, 0x21, 0xAA, 0x44, 0x9C, 0xA4, 0xDE, 
            0x0B, 0x1C, 0x89, 0x49, 0x52, 0x3A, 0x83, 0x97, 0x56, 0x86, 0xD2, 0x6C, 0x06, 0x5E, 0x10, 0xAD, 
            0xB9, 0x50, 0x16, 0xEA, 0x30, 0x79, 0xB5, 0x92, 0x35, 0xD0, 0x04, 0x37, 0xE4, 0xDA, 0xC5, 0x23, 
            0x0A, 0xBB, 0xC3, 0x18, 0x80, 0xF3, 0x08, 0x25, 0x68, 0x31, 0xD9, 0xF4, 0x7A, 0x05, 0x8F, 0xB1, 
            0xCA, 0x9F, 0xFC, 0xA6, 0x3F, 0xF7, 0xFA, 0x82, 0x54, 0x70, 0xCB, 0x96, 0xFF, 0xA7, 0x4F, 0x4E
        };

        public static byte Encrypt(ref byte[] bt, byte last_seed = InitialSeed)
        {
            for (int i = 0; i < bt.Length; i++)
            {
                int k, w;
                k = (bt[i] & 0x80) >> 4;
                k |= (bt[i] & 0x30) >> 3;
                k |= (bt[i] & 0x02) >> 1;

                w = (bt[i] & 0x40) >> 3;
                w |= (bt[i] & 0x0C) >> 1;
                w |= (bt[i] & 0x01);

                k = k ^ 0xC;
                w = w ^ 0xD;

                bt[i] = crypttab[(w << 4) | k];

                if ((i & 1) != 0)
                    bt[i] = (byte)(bt[i] ^ 0x2E);

                if (i == 0)
                    bt[i] ^= last_seed;
                else
                    bt[i] ^= bt[i - 1];
            }

            return bt[bt.Length - 1];
        }

        public static byte Decrypt(ref byte[] bt, byte last_seed = InitialSeed)
        {
            byte seed = bt[bt.Length - 1];

            for (int i = bt.Length - 1; i >= 0; i--)
            {
                byte b;

                if (i == 0)
                    bt[i] ^= last_seed;
                else
                    bt[i] ^= bt[i - 1];

                if ((i & 1) != 0)
                    bt[i] = (byte)(bt[i] ^ 0x2E);

                b = decrypttab[bt[i]];

                b = (byte)(b ^ 0xDC);

                bt[i] = (byte)((b & 0x08) << 4);
                bt[i] |= (byte)((b & 0x06) << 3);
                bt[i] |= (byte)((b & 0x01) << 1);

                bt[i] |= (byte)((b & 0x80) >> 1);
                bt[i] |= (byte)((b & 0x60) >> 3);
                bt[i] |= (byte)((b & 0x10) >> 4);
            }

            return seed;
        }
    }
}
